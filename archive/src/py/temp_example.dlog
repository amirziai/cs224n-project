_parse([query], answer(A,smallest(A,state(A)))).
_parse([query], answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),state(B))))).
_parse([query], answer(A,(major(A),river(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(major(A),river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(erie,pa))))).
_parse([query], answer(A,smallest(B,(state(A),density(A,B))))).
_parse([query], answer(A,(loc(B,A),smallest(B,city(B))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(austin,_))))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maryland))))).
_parse([query], answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))).
_parse([query], answer(A,(loc(B,A),const(B,cityid(portland,_))))).
_parse([query], answer(A,(city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))).
_parse([query], answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))).
_parse([query], answer(A,largest(B,(state(A),population(A,B))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("north dakota"))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))).
_parse([query], answer(A,largest(A,(capital(A),city(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B),city(C),const(C,cityid(durham,_))))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,largest(B,(state(A),population(A,B))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,count(B,state(B),A))).
_parse([query], answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))).
_parse([query], answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(indiana)))))).
_parse([query], answer(A,(state(A),next_to(A,B),largest(C,(population(B,C),state(B)))))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,longest(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(nebraska)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new jersey"))))).
_parse([query], answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))).
_parse([query], answer(A,count(B,(const(B,riverid(colorado)),river(B)),A))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(population(B,A),largest(B,(city(B),loc(B,C),const(C,stateid("new york")),state(C)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid(austin,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),largest(B,capital(B))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new jersey"))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(ohio)),traverse(C,B)))).
_parse([query], answer(A,highest(B,(state(A),loc(B,A),place(B))))).
_parse([query], answer(A,largest(B,(population(A,B),state(A),const(C,riverid(mississippi)),traverse(C,A))))).
_parse([query], answer(A,highest(A,(mountain(A),\+(loc(A,B),const(B,stateid(alaska))))))).
_parse([query], answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))).
_parse([query], answer(A,(state(A),loc(B,A),city(B),const(B,cityid(portland,_))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),density(B,C))))))).
_parse([query], answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C)))))).
_parse([query], answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))).
_parse([query], answer(A,(state(A),next_to(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))).
_parse([query], answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))).
_parse([query], answer(A,(state(A),loc(B,A),longest(B,river(B))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(capital(A),loc(A,B),largest(C,(state(B),density(B,C)))))).
_parse([query], answer(A,(state(A),loc(B,A),city(B),const(B,cityid(plano,_))))).
_parse([query], answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))).
_parse([query], answer(A,(population(B,A),largest(B,city(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))).
_parse([query], answer(A,count(B,(state(B),loc(C,B),low_point(B,C),lower(C,D),low_point(E,D),const(E,stateid(alabama)),loc(D,E)),A))).
_parse([query], answer(A,most(A,B,(river(A),traverse(A,B),state(B))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,place(B))))).
_parse([query], answer(A,(state(A),const(B,cityid(austin,_)),loc(B,A)))).
_parse([query], answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(alabama))))))).
_parse([query], answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))).
_parse([query], answer(A,count(B,(river(B),const(C,stateid(colorado)),loc(B,C)),A))).
_parse([query], answer(A,(len(B,A),const(B,riverid(mississippi))))).
_parse([query], answer(A,most(A,B,(state(A),loc(B,A),river(B))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))))).
_parse([query], answer(A,largest(B,(city(A),loc(A,C),const(C,countryid(usa)),density(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),river(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))).
_parse([query], answer(A,most(A,B,(state(A),loc(B,A),major(B),river(B))))).
_parse([query], answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),loc(B,A),lowest(B,place(B))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("san antonio",_))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,(state(A),const(B,riverid(chattahoochee)),river(B),traverse(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))))).
_parse([query], answer(A,count(B,(state(B),\+(loc(C,B),river(C))),A))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))).
_parse([query], answer(A,largest(B,(population(A,B),city(A))))).
_parse([query], answer(A,(len(B,A),longest(B,(river(B),traverse(B,C),const(C,stateid(texas))))))).
_parse([query], answer(A,(elevation(B,A),const(B,placeid("mount mckinley"))))).
_parse([query], answer(A,smallest(B,(state(A),density(A,B))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))).
_parse([query], answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida)),state(B)))).
_parse([query], answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(california)),population(A,B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(california)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,sum(B,state(B),area(B),A))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,smallest(A,state(A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),state(B),const(B,stateid(california))))).
_parse([query], answer(A,largest(B,(state(A),population(A,B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,smallest(B,(capital(A),population(A,B))))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),state(B),loc(C,B),river(C))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(wyoming)))))).
_parse([query], answer(A,largest(B,(state(A),density(A,B))))).
_parse([query], answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(pennsylvania)),population(A,B))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(population(B,A),const(B,countryid(usa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(texas)),loc(C,A),major(C),river(C)))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))).
_parse([query], answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))).
_parse([query], answer(A,(state(A),loc(B,A),city(B),const(B,cityid(dallas,_))))).
_parse([query], answer(A,(population(B,A),most(B,C,(state(B),next_to(B,C),state(C)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),largest(D,(state(C),population(C,D)))),A))).
_parse([query], answer(A,largest(B,(state(A),area(A,B))))).
_parse([query], answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))).
_parse([query], answer(A,sum(B,river(B),len(B),A))).
_parse([query], answer(A,(len(B,A),const(B,riverid(delaware)),river(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))).
_parse([query], answer(A,(density(B,A),state(B)))).
_parse([query], answer(A,smallest(B,(state(A),density(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),city(B),const(B,cityid(rochester,_))))).
_parse([query], answer(A,lowest(B,(state(A),loc(B,A),place(B),next_to(A,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(capital(A),loc(A,B),smallest(B,state(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(washington))))).
_parse([query], answer(A,count(B,(const(C,stateid(iowa)),next_to(C,B),state(B)),A))).
_parse([query], answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),most(C,D,(state(C),loc(D,C),river(D)))),A))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(density(B,A),const(B,stateid(maine))))).
_parse([query], answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))).
_parse([query], answer(A,(capital(A),city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))).
_parse([query], answer(A,largest(B,(state(A),area(A,B))))).
_parse([query], answer(A,(state(A),longest(B,(river(B),loc(B,C),const(C,stateid(texas)))),traverse(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,riverid(missouri)),river(B)))).
_parse([query], answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(elevation(B,A),const(B,placeid("mount mckinley"))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),const(B,cityid(miami,_)),loc(B,A)))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),state(B),const(C,riverid(colorado)),river(C),traverse(C,B))))).
_parse([query], answer(A,(state(A),loc(B,A),major(B),river(B)))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,largest(B,(density(A,B),state(A),loc(A,C),const(C,countryid(usa)))))).
_parse([query], answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(tempe,az))))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nevada)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,largest(B,(state(A),capital(A,B),city(B))))).
_parse([query], answer(A,(loc(B,A),mountain(B)))).
_parse([query], answer(A,most(A,B,(state(A),next_to(A,B),state(B))))).
_parse([query], answer(A,(city(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),state(C),const(D,riverid(colorado)),river(D),traverse(D,C)))))).
_parse([query], answer(A,(loc(B,A),const(B,cityid(dallas,_))))).
_parse([query], answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(state(A),const(B,riverid(delaware)),river(B),traverse(B,A)))).
_parse([query], answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))).
_parse([query], answer(A,largest(B,(city(A),population(A,B))))).
_parse([query], answer(A,(density(B,A),const(B,stateid("new york"))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,cityid("san francisco",_)))))).
_parse([query], answer(A,count(B,(capital(B),const(C,stateid("rhode island")),loc(B,C)),A))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))).
_parse([query], answer(A,(len(B,A),const(B,riverid(ohio)),river(B)))).
_parse([query], answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,stateid(california))))))).
_parse([query], answer(A,smallest(B,(state(A),area(A,B))))).
_parse([query], answer(A,(river(A),\+(traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,most(A,B,(state(A),loc(B,A),major(B),river(B),traverse(B,A))))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("new york",_))))).
_parse([query], answer(A,largest(B,(state(A),population(A,B))))).
_parse([query], answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),const(B,stateid("rhode island")))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(tucson,_))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,mn))))).
_parse([query], answer(A,(river(A),\+(traverse(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,longest(A,(river(A),loc(A,B),largest(B,state(B)))))).
_parse([query], answer(A,smallest(B,(state(A),density(A,B))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B),lowest(C,place(C))))).
_parse([query], answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(georgia)))))).
_parse([query], answer(A,(const(B,cityid("san antonio",_)),loc(B,A),state(A)))).
_parse([query], answer(A,most(A,B,(river(A),traverse(A,B),state(B))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(ohio))))).
_parse([query], answer(A,longest(A,(river(A),loc(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C))))))).
_parse([query], answer(A,(state(A),longest(B,river(B)),traverse(B,A)))).
_parse([query], answer(A,count(B,(state(B),const(C,countryid(usa)),loc(B,C)),A))).
_parse([query], answer(A,(population(B,A),largest(B,(city(B),loc(B,C),largest(D,(state(C),area(C,D)))))))).
_parse([query], answer(A,(high_point(B,A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,smallest(A,most(A,B,(state(A),next_to(A,B),state(B)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,smallest(B,(population(A,B),state(A))))).
_parse([query], answer(A,(density(B,A),largest(B,state(B))))).
_parse([query], answer(A,most(A,B,(river(A),traverse(A,B),state(B))))).
_parse([query], answer(A,(state(A),const(B,placeid("mount mckinley")),loc(B,A)))).
_parse([query], answer(A,most(A,B,(river(A),traverse(A,B),state(B))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,count(B,(state(B),const(C,stateid(tennessee)),next_to(C,B)),A))).
_parse([query], answer(A,(population(B,A),const(B,stateid("rhode island"))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),most(B,C,(state(B),loc(C,B),city(C)))))).
_parse([query], answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,(len(B,A),const(B,riverid("north platte")),river(B)))).
_parse([query], answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(nevada)),population(A,B))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),fewest(B,C,(state(B),loc(C,B),city(C)))))).
_parse([query], answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),longest(C,(state(B),loc(C,B),river(C)))))).
_parse([query], answer(A,most(A,B,(state(A),loc(B,A),river(B))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid("new mexico")))))).
_parse([query], answer(A,count(B,(state(B),loc(C,B),higher(C,D),place(C),highest(D,(place(D),loc(D,E),state(E),loc(F,E),largest(F,(capital(F),city(F),loc(F,G),const(G,countryid(usa))))))),A))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),const(C,riverid(mississippi)),traverse(C,B))))))).
_parse([query], answer(A,(state(A),loc(B,A),city(B),const(B,cityid("salt _lake _city",_))))).
_parse([query], answer(A,smallest(B,(state(A),population(A,B))))).
_parse([query], answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))).
_parse([query], answer(A,smallest(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(loc(B,A),const(B,riverid(chattahoochee)),river(B)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,largest(B,(population(A,B),state(A))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,most(A,B,(state(A),next_to(A,B),state(B))))).
_parse([query], answer(A,largest(B,(city(A),density(A,B))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,smallest(B,(population(B,A),state(B))))).
_parse([query], answer(A,(density(B,A),state(B),longest(C,(river(C),loc(C,D),const(D,countryid(usa)))),traverse(C,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(B))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(B))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("is smallest"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("is smallest"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(B))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("is smallest"))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),capital(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),largest(C)))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa))),))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa))),traverse))).
_parse([query], answer(A,largest)).
_parse([query], answer(,A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(all)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(C,B)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C),loc(C,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio))))))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(ohio))))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(ohio))))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio)))))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio)))))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(ohio)))))))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(ohio))what))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(ohio))traverse))).
_parse([query], answer(A,(major(A),traverse(A)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(river(A),city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),city(A),loc(A)))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(ohio)),loc))).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], major(A)).
_parse([query], rivers(A)).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(city(A),traverse(A,B)))).
_parse([query], answer(A,(city(A),traverse(A)))).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], answer(A,(population(B,A),const(B,cityid(erie,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(pennsylvania))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(pennsylvania))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(erie,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(erie))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(erie,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(erie,_))))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(pennsylvania))))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),const(B,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(erie))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(pennsylvania))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(@,A)))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,largest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))),).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(city)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(city)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(city)))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(loc(B,A),loc(B,C)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,(loc(B,A),loc(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(austin)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),const(D,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(austin)))))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(austin)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),const(D,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),const(D,stateid(austin))))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(E,D)))).
_parse([query], answer(A,(river(A),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(D,E)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),state(D),traverse(D,E)))).
_parse([query], answer(A,count(B))).
_parse([query], river(A)).
_parse([query], rivers(A)).
_parse([query], traverse(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(massachusetts)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(maryland,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(maryland,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(maryland,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maryland))),)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maryland))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maryland))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(maryland))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maryland,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))),).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),river(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(portland,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,cityid(portland,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(portland,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,cityid(portland,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland))),)).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(portland))),)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,cityid(portland,_))),)).
_parse([query], answer(A,(size(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(portland,_))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,cityid(portland,_))))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland))),loc)).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(portland))),loc)).
_parse([query], answer(A,((A)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,((A),loc(A,B)))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(portland))),loc(B))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(portland)),loc(B)))).
_parse([query], answerA).
_parse([query], answer</s>A).
_parse([query], loc(A)).
_parse([query], where(A)).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(mississippi,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(mississippi,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(major(A),traverse(A,B)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(mississippi,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], answer</s>A).
_parse([query], river(A)).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),how))).
_parse([query], answer(A,(size(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(houston,_)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),how)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))),@)).
_parse([query], answer(A,(size(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),@)).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(houston,_)))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(capital(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answerA).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))),)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),river(B))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),traverse(B,C))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),@)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),traverse(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),traverse)).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),river)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))),river(B))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio)),traverse))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),next_to(@,A)))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B)))).
_parse([query], answer(A,smallest(B,(state(A),next_to(A,B))))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C)))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B)))).
_parse([query], answer(A,(state(A),next_to(B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),const(D,C),state(D)))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B),const(D,C),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),loc))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc))).
_parse([query], answer(A,(state(A),next_to(B,A),const(C,B),state(C),loc))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(surround))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], state(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dakota))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(north))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dakota))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("north dakota"))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(dakota))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(north)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("north dakota"))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dakota)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(north)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(dakota))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dakota))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("north dakota"))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(north))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(dakota))))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(size(B,A),loc(B)))).
_parse([query], answer(ofA)).
_parse([query], answer</s>A).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),count))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),traverse))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid()))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,countryid(usa)))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid()))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),@)),).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),count))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),loc(B,C))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),traverse))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B))))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(major(B),city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,countryid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),count))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid()))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),state(C),loc(C,D),const(D,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(capital(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer</s>A).
_parse([query], answer(@)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(durham))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(durham)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(durham))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(durham)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(durham))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(durham))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(kansas))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(kansas))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(kansas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(kansas))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas))),))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(kansas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(kansas))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(kansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas))),loc))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(,A)).
_parse([query], answer(A,(population(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(boulder))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(boulder))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(boulder))))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(boulder))))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(boulder,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(boulder,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer</s>A).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(population))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,largest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C),const(D,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C),const(E,D)))).
_parse([query], answer(,A)).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(houston))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(houston,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,cityid(houston,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer</s>A).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(are)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_))),how(C,B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,A))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(there,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(there)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,cityid(there,_)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(B)))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(are)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_))),how(C,B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(there,_))),how(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_))),how(C,B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(there,_))),how(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(borders)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(borders)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(indiana)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(borders)))))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana))),))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana))))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,longest(A))).
_parse([query], answer(A,highest)).
_parse([query], answer(A,smallest)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,longest)).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana))),traverse(C)))).
_parse([query], answer(A,highest(A,B,(river(B),traverse(B,C),const(C,stateid(indiana))),traverse))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(populous)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(populous)))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(populous))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer(@)).
_parse([query], answer(A,smallest(B))).
_parse([query], answer</s>A).
_parse([query], state(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(,A)).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),traverse(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),traverse(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),traverse(A,B),const(B,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest)).
_parse([query], answer(A,longest)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjerseyjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjerseyjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjerseyjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jersey))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjerseyjersey))))).
_parse([query], answer(ofA)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there))),@))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(are)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(there)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(there))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(there))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(are)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(river(B),next_to(B))))).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(B)))).
_parse([query], answer(A,count(B,(state(B),traverse(B))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),loc(C))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))),A))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid("new york"))),A))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"""))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))),population))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"""))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))),A)).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid("new york"))),A)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),loc(B,C)))).
_parse([query], answer(A,(population(B,A),highest(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))),population)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"""))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))),A)).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid("new york"))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"""))),A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C,D)))).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], river(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(austin))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(austin)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(austin)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(austin)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,B),highest(B))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(B,A),loc)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),loc(C))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(capital)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(capital)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(capital))))).
_parse([query], answer(A,highest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(capital))))).
_parse([query], answer(A,highest(B,A))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(capital))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),highest))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(massachusetts)))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(massachusetts))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(massachusetts)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(massachusetts))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(massachusetts))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(massachusetts))),)).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(massachusetts))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(size(B,A),loc(B)))).
_parse([query], answer</s>A).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(massachusetts))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey""))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(jerseynewjersey))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(jerseynewjersey""))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer</s>A).
_parse([query], states(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),next_to(C,D)))).
_parse([query], answer(@)).
_parse([query], answer(A,count(B))).
_parse([query], answer</s>A).
_parse([query], states(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(@,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),highest))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,smallest)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,largest)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,largest(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C,D)))).
_parse([query], answer(,A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(alaska)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(alaska)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(alaska))),))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(alaska))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(alaska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(alaska))),loc))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(,A)).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,highest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities)))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,highest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(cities,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(cities))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(portland)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(portland)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(portland)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(portland)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(portland))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B)))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], state(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,highest(B,(place(A),loc(A,B))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,highest(B,(place(A),loc(A,B)))))).
_parse([query], answer(A,highest(A,(place(@),loc(@,A))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B)))))).
_parse([query], answer(A,highest(A,(place(@),loc(@,A)))))).
_parse([query], answer(A,highest(B,(place(A),loc(A,B))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,highest(A,(place(@),loc(@,A))))).
_parse([query], answer(A,highest(B,(place(A),loc(A,B))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,highest(A,(place(@),loc(@,A))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),state(C),loc(D,C),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),state(C),loc(D,C),state(D),loc(E,D),state(E)))).
_parse([query], answer(AB)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(hawaii,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(hawaii,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(hawaii))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(hawaii,_))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(hawaii))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(hawaii))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(hawaii))))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(hawaii,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),const(B,stateid(hawaii))))).
_parse([query], answer</s>A).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(indiana))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),next_to(A)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], state(A)).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,cityid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@)),).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how)),).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(B)))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa,_)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),city(C),loc(C,D))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how)),A).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa)),@)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer</s>A).
_parse([query], capital(A)).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,smallest(B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),next_to(B)))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(E,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(E,D),state(E)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),next_to(@,A),state(A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(C,B),state(C)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(D,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(D,C),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),next_to(C,D),state(D),next_to(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),traverse(C,D),state(D),next_to(D,E),state(E)))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(AB)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(colorado))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C,B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),@)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C,B)),)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C,D)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(colorado))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),@)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),A)).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C,D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(colorado))),traverse)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),traverse(C)))).
_parse([query], answer(A,count(B,(river(B),traverse(B))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),const(C,stateid(longest))))).
_parse([query], answer(A,highest(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,highest(B,A))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(longest,_))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(border))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))),)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(kentucky))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(border))))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], which(A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(utah)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(utah)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(utah)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(utah))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(utah))))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(capital(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),capital(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C)))).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], states(A)).
_parse([query], river(A)).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(B,C))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(B,C))))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(plano)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(plano)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(plano)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(plano)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(plano))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B)))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], state(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(D,C),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D),state(E)))).
_parse([query], answer(AB)).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,countryid(usa))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,countryid(usa))))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B)))).
_parse([query], answer(A,(population(B,A),highest(B)))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C)))).
_parse([query], answer(A,(population(B,A),highest(B,C)))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,countryid(usa))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa,_))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(utah,_)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),how)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(size(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(utah,_)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))),how)),).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),@)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(size(C))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(montana))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),next_to(A)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], state(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(B))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),river(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("new york"))),traverse)).
_parse([query], answer</s>A).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(B,C))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(C,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(C,D))))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(C,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(E,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(E,D),state(E)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C),state(D),traverse(D,E),state(E)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(alabama))),)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(alabama))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(river(A)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer</s>A).
_parse([query], state(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))),)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C)))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(river(A),traverse(A,B),const(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))),traverse)).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(D)))).
_parse([query], river(A)).
_parse([query], traverse(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),@)).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B)))).
_parse([query], answer(A,(city(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),city(A),traverse(A,B)))).
_parse([query], answer(A,(major(A),traverse(A,B)))).
_parse([query], answer(A,(city(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),@).
_parse([query], answer(A,(major(A),traverse(A)))).
_parse([query], answer(A,(river(A),city(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),traverse).
_parse([query], answer(@)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(A)))).
_parse([query], answer</s>A).
_parse([query], rivers(A)).
_parse([query], are(A)).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(point))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(C))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(C))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(point))))).
_parse([query], answer(A,(state(A),loc(B,A),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,highest(B,(place(A))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(C))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(point))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin,_))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,smallest)).
_parse([query], answer(A,largest)).
_parse([query], answer(AB)).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], const(A)).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(alabama))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(alabama))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(alabama)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(alabama)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(alabama))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(alabama))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(alabama)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(alabama)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(alabama))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(alabama))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(alabama)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(alabama))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(alabama))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(alabama))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))),)))).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(alabama))))).
_parse([query], answer(A,(population(B,A),highest(B)))).
_parse([query], answer(A,(size(B,A),highest(B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C)))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C)))).
_parse([query], answer(A,(population(B,A),loc(B,C),highest(C)))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),const(D,stateid(alabama)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))))))).
_parse([query], answer(A,count(B,(place(B),loc(B))))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(alabama))))))).
_parse([query], answer(A,(size(B,A),loc(B)))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(alabama))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(alabama))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(mississippi)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))),)).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),@))).
_parse([query], answer(A,count(B,(river(B))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(colorado))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(river(B),traverse(C,B))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(city(B))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))),)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_))),)).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_)),loc))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(B,C),const(C,stateid(most,_)),traverse))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(austin,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin,_))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(austin,_)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin))),how)).
_parse([query], answer(A,(size(B,A),const(B,cityid(austin,_))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin,_))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(austin,_)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(austin,_))),how)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,count(B,(size(C,B))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(austin,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(size(C))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B)))).
_parse([query], answer(A,(capital(A,@)))).
_parse([query], answer(A)).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(@,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density))))).
_parse([query], answer(,A)).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),capital(C),loc(C,D)))).
_parse([query], answer</s>A).
_parse([query], answer(@)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(B,A),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(B,A),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(a))),)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(B,A),const(B,stateid(a))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(@,B)))).
_parse([query], answer(AB)).
_parse([query], state(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,place(A))))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,(place(A),loc)))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),traverse(A))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(florida))),)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(florida))),)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(florida))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(florida,_))))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answer</s>A).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(size(B,A),loc(B)))).
_parse([query], answer</s>A).
_parse([query], capital(A)).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(B,C))))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rivers)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(rivers,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(rivers,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(rivers)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,largest)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),traverse(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(rivers,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(rivers,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rivers))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(inhabitants))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(inhabitants))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(inhabitants)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(inhabitants))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(inhabitants)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(inhabitants))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(inhabitants))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(inhabitants))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(F,E)))).
_parse([query], answer(A,(capital(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(F,E)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(size(B,A),loc(B)))).
_parse([query], answer</s>A).
_parse([query], capital(A)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(elevation))))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(elevation,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(antonio,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(antonio,_))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(antonio))),)).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(antonio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(antonio))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(antonio,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(antonio,_))))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(iowa))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))),)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(iowa))),)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(iowa))))).
_parse([query], answer(A)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer</s>A).
_parse([query], answer(AB)).
_parse([query], next_to(A)).
_parse([query], population(A)).
_parse([query], state(A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(chattahoochee))))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee))),traverse(B,C))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee))),traverse(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(chattahoochee))),traverse)).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee))),A)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee))),traverse)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(chattahoochee))),river)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit))),@))).
_parse([query], answer(A,(size(B,A),const(B,cityid(detroit,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit,_))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(detroit,_)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),population))).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),how)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),population)).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit))),@)).
_parse([query], answer(A,(size(B,A),const(B,cityid(detroit,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(detroit,_))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(detroit,_)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),population)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(detroit,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(have))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(have)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(have)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(have))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(not)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(have))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers))),how)),).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(rivers))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(have)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers))),how)),).
_parse([query], answer(A,count(B,A))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(state(B),next_to(C,B))))).
_parse([query], answer(A,count(B,(state(B),loc(C,B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(rivers)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(have)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),state(C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(rivers,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(not)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(rivers))),how)),A).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(rivers))),how)),A).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C))))).
_parse([query], answer(A,(population(B)))).
_parse([query], answer(A,(count(B)))).
_parse([query], answer(A,(size(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))),)).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], state(A)).
_parse([query], states(A)).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,countryid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,countryid(usa)))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(usa))))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(usa)))))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,countryid(usa))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,countryid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B),loc(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(the))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(city))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,largest)).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(capital(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mount,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mckinley,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mountmountmckinley))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mountmountmount))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mount,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mount,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mckinley,_))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(mountmountmckinley))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mountmountmount))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mount,_))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mckinley,_))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mountmountmckinley""))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(@,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,largest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(california))),)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(california))))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid)))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C)))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B)))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(california,_))))).
_parse([query], answer(@)).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(california)),loc))).
_parse([query], answer(AB)).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid)))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(size(B,A),city(B),loc(B,C),const(C,stateid())))).
_parse([query], river(A)).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(washington)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,longest(A))).
_parse([query], answer(A,largest(A))).
_parse([query], answer(A,longest)).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,stateid(florida)))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(florida))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(has))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(california))),)).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(california))),)).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(has))))).
_parse([query], answer(A,(loc(B,A),capital(B)))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(@,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(has))))).
_parse([query], answer(AB)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(montana)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(montana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),largest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),largest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(california)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),largest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(california)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),largest(B,stateid(california)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),largest(B))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alaska))),)).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,stateid(alaska))))).
_parse([query], answer(A)).
_parse([query], answer(A,(major(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,stateid(alaska))))).
_parse([query], answer(A,(city(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),city(C),loc(C,D)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alaska)),loc))).
_parse([query], answer(@)).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),city(C),loc(C)))).
_parse([query], answer(A,(size(A,B)))).
_parse([query], answer</s>A).
_parse([query], answer(AB)).
_parse([query], city(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(50))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(50))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(50))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(all))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(50))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(nebraska)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),traverse(A,B)))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(city(B),traverse(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(city(B),traverse(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,count(B,(B)))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa))),traverse))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C),const(C,stateid(iowa))),count))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),how)),A).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(iowa))),how)),@).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),how)),A).
_parse([query], answer(A,count(B,(river(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),city(B),loc(B))))).
_parse([query], answer(A,count(B,(city(B),traverse(B,C))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),next_to(A)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], state(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A)))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),@)).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,B))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,cityid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(D,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B)))).
_parse([query], answer(A,(city(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),city(A),traverse(A,B)))).
_parse([query], answer(A,(major(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),@).
_parse([query], answer(A,(river(A),city(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(D,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,cityid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),traverse).
_parse([query], answer(@)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),river).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,stateid(texas)),traverse(B)))).
_parse([query], answer</s>A).
_parse([query], rivers(A)).
_parse([query], are(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california)))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(california))))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(california)))),).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(california))))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C)))).
_parse([query], answer(A,(major(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(california,_))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,D)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,D)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(population))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(population))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(population)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(population)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(population))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(population,_))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,highest(B,(place(A))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(population))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(population,_))))).
_parse([query], answer(A,highest(B,(state(A),loc(A,B),loc)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(colorado)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(hawaii))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(hawaii))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(hawaii)))))).
_parse([query], answer(A,(loc(B,A),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(hawaii)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(hawaii))),))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(hawaii))),))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,(loc(B,A),loc(B)))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),loc(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(hawaii,_)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(iowa)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(iowa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(capital(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C,D)))).
_parse([query], answerA).
_parse([query], answer(AB)).
_parse([query], river(A)).
_parse([query], are(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(iowa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(iowa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(iowa))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(iowa))),)).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(iowa))))).
_parse([query], answer</s>A).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(iowa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),capital(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(iowa))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(@,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(@,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid("has population"))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid("has population"))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(a))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(river)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(river)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(a))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(a)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(river)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(a,_)))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,largest(A))).
_parse([query], answer(A,largest)).
_parse([query], answer(A,longest)).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(B,A),const(B,stateid(hawaii))))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(river(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(B)))).
_parse([query], answer(A,smallest(B))).
_parse([query], answer(A,(area(B)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], state(A)).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(alaska,_))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(alaska)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(alaska)))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))),@)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(alaska,_)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))),)).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))),@)).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))),)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(alaska))),))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(alaska,_))),)).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(alaska,_))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(alaska)))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))),@)).
_parse([query], answer(A,(size(B,A),const(B,stateid(alaska))),@)).
_parse([query], answer(A,(population(B,A),(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(alaska))),A))).
_parse([query], answer(A,(size(B,A),(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(alaska,_)))))).
_parse([query], answer(A,(population(B,A),(B),loc(B,C)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,(population(B,A),(B),loc(B)))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(wyoming)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(wyoming))),))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(wyoming)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(wyoming)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,D))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(wyoming,_)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),capital(D))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(wyoming))),traverse))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(@,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,largest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C),const(D,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(density,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C),const(E,D)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(population))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(population))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(D,E)))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(river(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(area(B)))).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], const(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(place(A),loc(A,B),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),place(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),population))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,cityid(usa,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(usa))),)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,cityid(usa,_))),A))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))),)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),A)).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,cityid(usa,_))),)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,cityid(usa,_))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),population)).
_parse([query], answer(A,(population(B,A),const(B,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,cityid(usa,_))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))),population)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,cityid(usa,_))),A)).
_parse([query], answer(A,(population(B,A),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(major))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(major))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(major))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(major))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(river))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(major))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(major))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(AB)).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], states(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maryland))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(maryland))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maryland))))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(maryland))),))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(maryland))),))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,C),const(C,stateid(maryland)))))).
_parse([query], answer(A,(loc(B,A),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,(loc(B,A),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid(maryland,_)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,C),const(C,stateid()))))).
_parse([query], answer(A,(population(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(population(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(B,C))))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B,A)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(B,A),capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(dallas)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(dallas)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(dallas)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(dallas)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(dallas))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,cityid(dallas))))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),city(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),largest))).
_parse([query], state(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(area(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(capital(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C),state(D),loc(E,D)))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(E,D),state(E)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C),state(D),loc))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D),loc))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D),loc))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(D,C),state(D),loc))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D),loc))).
_parse([query], answer(A,(population(B,A),capital(B,C),state(C),loc(D,C),state(D),loc(E,D),state(E),loc))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(A,B)),count))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A),next_to(A,B)),count))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(A,B))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A),next_to(A,B))))).
_parse([query], answer(A,count(B,A))).
_parse([query], answer(A,count(B,(state(B),next_to(A,B),state(B),next_to(A,B))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,count(B,(state(B))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(A,B)),count)),).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A),next_to(A,B)),count)),).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(A,B)),count))).
_parse([query], answer(A,count(B,(state(B),next_to(A,B),state(B))))).
_parse([query], answer(A,count(B,(river(A))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,C),state(C))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A),next_to(A,B)),count))).
_parse([query], answer(A,count(B,(state(A),next_to(A,C))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(A,B)),population(C,B)))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A),next_to(A,B)),population(C,B)))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),loc(D,C))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(A,B)),population(C,B),state(C)))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(A),next_to(A,B)),population(C,B),state(C)))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),loc(D,C),state(D))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,smallest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,smallest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))),)).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))),)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),@)).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),traverse(B,C))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),traverse(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))),traverse)).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(A,count(B))).
_parse([query], answer(AB)).
_parse([query], river(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,countryid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,countryid(usa))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,countryid(usa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(size(B,A),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(delaware,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(delaware))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(delaware)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(delaware,_)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(delaware,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(delaware,_))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(delaware))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),traverse))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(delaware,_)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),@))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(delaware)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),A))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),traverse))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(delaware))),traverse(C)))).
_parse([query], answer(A,count(B,(river(B),traverse(B))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer</s>A).
_parse([query], capital(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(colorado))),)).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),capital(C),loc(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(colorado)),traverse))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(each))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(each))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(each,_))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(each,_))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(each))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),const(C,stateid(each))))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(each))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(each,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(populationA)).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_)))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,largest(B,(state(A))))).
_parse([query], answer(A,smallest(B,(state(B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),const(E,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rochester)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rochester)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rochester)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rochester)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rochester))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(rochester))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,countryid(rochester))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),capital(C)))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),highest(C)))).
_parse([query], state(A)).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),loc(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),loc(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),loc(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho)))),).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(idaho,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,highest(B,(place(A))))).
_parse([query], answer(A,highest(B,(place(B))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C),const(C,stateid(idaho)))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(B,A),loc(B,C),const(C,stateid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),highest(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,highest(B,(place(B),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(idaho))))).
_parse([query], answer(A,highest(B,(place(A),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(idaho))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,cityid(idaho,_))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(idaho,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(washington))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(washington))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(washington,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(washington,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(washington))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(washington,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(washington))),)).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(washington))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(washington))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(washington,_)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,cityid(washington,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),const(B,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(washington))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_)))))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),A)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_))),A))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_))),A))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_)))))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_))),))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),@)).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,count(B,(state(B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_)))))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))))).
_parse([query], answer(A,count(B,(state(A),next_to(A,A))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),next_to(C,B)))).
_parse([query], answer(A,@)).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),how)).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,count(B,(state(B),next_to(B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa,_))),A))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),A)).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),how)).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(usa,_))),@)).
_parse([query], answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid())))).
_parse([query], answer(A,(population(B,A),state(B),next_to(A,C)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(austin)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(D,stateid(austin))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),city(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),city(C)))).
_parse([query], answer(AB)).
_parse([query], next_to(A)).
_parse([query], state(A)).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),B))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(rivers)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),B))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(most))),@))).
_parse([query], answer(A,count(B,(river(B),loc(C,B))))).
_parse([query], answer(A,count(B,(river(B),traverse(C,B))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),A)),).
_parse([query], answer(A,count(B,(B)))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers))),A)),).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most))),A)),).
_parse([query], answer(A,count(B,(river(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most))),A))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(D,C))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(rivers)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),B))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),traverse(C,D))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(most))),A)),B).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),const(D,stateid(rivers))),A)),B).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C),loc(C,D),const(D,stateid(most))),A)),B).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),state(C),loc(C,D),state(D),loc(D,E))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"york))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"york))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"york))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"york))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"))))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid("new york"))))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid("new york"york") ) )")).
_parse([query], answer(AB)).
_parse([query], answer</s>A).
_parse([query], answer(A,(population(B,A),const(B,cityid(maine,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maine))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maine))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(maine,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(maine,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(maine))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maine))))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A))),).
_parse([query], answer(A,(population(B,A),capital(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,cityid(maine,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(maine))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(maine,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),highest))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),loc(A,B),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A)).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas))),)).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(city(A),city(A),loc(A,B)))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(city(A),city(A),loc(A)))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas,_))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas)),loc))).
_parse([query], answer(AB)).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas)),loc(B)))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas)),loc))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(texas))),loc)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(run)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(A,count(B))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(F,E)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(G,F)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))),traverse(B,A)))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))),traverse(B,C))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(texas))),traverse(B))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))),)).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(populationA)).
_parse([query], answer(ofA)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A)))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,B)))).
_parse([query], answer(A,(river(A),city(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(major(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),city(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas)),traverse(C,D)))).
_parse([query], answer(A,(major(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(river(A),city(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))),traverse).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas)),traverse(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas)),traverse))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))),traverse(C))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)),traverse(B,C),const(C,stateid(texas)),traverse))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))),traverse)).
_parse([query], answer</s>A).
_parse([query], rivers(A)).
_parse([query], are(A)).
_parse([query], river(A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri)))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(missouri)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(missouri))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))),traverse)).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(missouri))),next_to)).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B)))).
_parse([query], answer(AB)).
_parse([query], river(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("mount mount"))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(mckinley)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(mountmountmckinley)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid("mount mount")))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid("mount mckinley")))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("mount mount"))),)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("mount mount"))))).
_parse([query], answer(A,(population(B,A),const(B,cityid("mount mount"))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(mountmountmckinley)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid("mount mckinley")))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid("mount mount")))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(mckinley)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid("mount mckinley")))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid("mount mount")))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),const(B,stateid("mount mount"))),@)).
_parse([query], answer(AB)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(delaware)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(delaware)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(miami))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(miami))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(miami))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(miami))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(miami,_))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,largest)).
_parse([query], answer(AB)).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),@)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),@))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),?))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),?)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),traverse)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),@)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),?)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),river(B))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),traverse)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),traverse(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),traverse(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),river(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(rivers))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(rivers))),traverse(C))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(louisiana))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(louisiana)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(louisiana)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(louisiana)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(louisiana))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(louisiana)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(louisiana))),))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(louisiana))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(louisiana))),loc))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(,A)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(usa))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(usa))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(usa))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(florida))),))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(florida)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(florida))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,longest)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(florida))),traverse))).
_parse([query], answer(A,(population(B,A),const(B,cityid(tempe,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(arizona))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(arizona))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(tempe,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(arizona))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tempe,_))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(tempe,_))))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tempe))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(arizona))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(alaska,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(alaska,_))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(alaska))),)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(alaska))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(alaska))))).
_parse([query], answer(A,@)).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(alaska,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(alaska))))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(alaska))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(meters)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(pennsylvania)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(pennsylvania)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))).
_parse([query], answer(A)).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(major(A),city(A),loc(A,B)))).
_parse([query], answer(A,(city(A),city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(major(A),city(A),loc(A)))).
_parse([query], answer(A,(city(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania)),loc))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(pennsylvania)),loc))).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], major(A)).
_parse([query], are(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(alaska))))))).
_parse([query], answer(A,(city(A),traverse(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska))))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska))),)).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska))traverse))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska))what))).
_parse([query], answer(A,(city(A),traverse(A,B)))).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),city(A),loc(A,B)))).
_parse([query], answer(A,(city(A),traverse(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(river(A),city(A),loc(A)))).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska,_))))).
_parse([query], answer(@)).
_parse([query], answer(A,(river(A),city(A),loc(A,B),const(B,stateid(alaska)),loc))).
_parse([query], answer</s>A).
_parse([query], rivers(A)).
_parse([query], river(A)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(is))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(is)))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(is))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(largest))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(is))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(is))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(largest))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(the))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(is))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(the))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(is))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(largest))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A)).
_parse([query], answer(AB)).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mountains))))).
_parse([query], answer(A,(river(A)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(city(A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(major(A)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(major(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(,A)).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], where(A)).
_parse([query], answer(A,state(A,B),state(B))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,state(A,B),state(B),next_to(C,B))).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C),state(C))).
_parse([query], answer(A,state(A,B),state(B),next_to(C,B),state(C))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(A,B)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C))).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(B)))).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C),state(C),next_to(C,D))).
_parse([query], answer(A,state(A,B),state(B),next_to(C,B),state(C),next_to(C,D))).
_parse([query], answer(,A)).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E),state(E))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(C,D)))).
_parse([query], answer(A,state(A,B),state(B),next_to(C))).
_parse([query], answer(AB)).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),?))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),)).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(texas,_)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),?))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,@)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),@))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),?))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),population))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas)),population))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_)),how(B)))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(texas,_)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(yorknewyork))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(colorado)))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B,C),const(C,stateid(colorado)))))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(colorado)))))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(colorado))),)).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(colorado))))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(colorado))))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(state(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(state(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(colorado)),loc))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dallas))),)).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(dallas))),)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(dallas))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(dallas))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,((A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,cityid(dallas,_))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,((A),loc(A,B),const(B,stateid(dallas))),loc)).
_parse([query], answer(A,((A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,((A),loc(A)))).
_parse([query], answer(A,(size(B,A),const(B)))).
_parse([query], answer(A,(loc(B,A),const(B)))).
_parse([query], answer(A,(population(B,A),const(B)))).
_parse([query], answer</s>A).
_parse([query], loc(A)).
_parse([query], const(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(C))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(C))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(usa))))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(loc(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C)))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B)))).
_parse([query], answer(A,(loc(B,A),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),highest(C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B),loc(B,C),const(C,stateid())))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(delaware)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(delaware)))),).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(delaware))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(delaware))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),loc(C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))loc))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C))),))).
_parse([query], answer(A,(size(B,A),highest(B,place(B),loc(B))))).
_parse([query], answer(A,(population(B,A),highest(B,place(B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(people))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(people))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B,A)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(people))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(area(B)))).
_parse([query], answerA).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most people"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("most people"""))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(ofA)).
_parse([query], answer(AB)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(francisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco,_))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(francisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(franciscosanfrancisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco,_))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(francisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(franciscosanfrancisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco)))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(francisco))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(san))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(franciscosanfrancisco))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(san))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(francisco))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(francisco,_))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(francisco))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(franciscosanfrancisco))))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(francisco,_))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(san))))).
_parse([query], answer(ofA)).
_parse([query], answer</s>A).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid("rhode have")))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid("rhode have")))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(have))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(have)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid("rhode have")))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid("rhode have")))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid("rhode have")))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(have))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid("rhode have")))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid("rhode have"))),))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid("rhode have"))),))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(have)))))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid("rhode have"))),))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(have))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(virginia)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,highest(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(virginia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(ohio,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(ohio))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(ohio)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(ohio,_)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,countryid(ohio)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(ohio))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(ohio,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(ohio,_))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),traverse))).
_parse([query], answer(A,(population(B,A),const(B,stateid(ohio))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(ohio,_)))))).
_parse([query], answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(ohio)))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),traverse))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(ohio))),@)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,countryid(ohio)))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(ohio))),traverse(C)))).
_parse([query], answer(A,count(B,(river(B),traverse(B))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),@))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),loc))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,countryid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),@)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),loc))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),@))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),loc))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,countryid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(california)))))).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),traverse(C,B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),traverse(C)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(california)))))).
_parse([query], answer(A,count(B,(place(B),loc(B))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),traverse(C,D)))).
_parse([query], answer(A,(size(B,A),highest(B)))).
_parse([query], answer(A,(population(B,A),highest(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),traverse(C)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(D,C))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(F,E)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),traverse(B,A))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),traverse(B,A))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),river(B))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),traverse(B,C))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),traverse)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),traverse(B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),river(B),traverse(B,C))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),river(B))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(major(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))),river(B),traverse(B))).
_parse([query], answer(A,(major(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B)))).
_parse([query], answer</s>A).
_parse([query], river(A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(it)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(it)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(it)))))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(it)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(it))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(it))))).
_parse([query], answer(A,(river(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(B,A),const(B,stateid(it))))).
_parse([query], answer(A,count)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,(state(A),loc(B,A),river(B)))).
_parse([query], answer(A,(state(A),loc(B,A),river(B),loc(C,B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(density(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid("new city"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new york"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(ofA)).
_parse([query], answer(populationA)).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(population,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,largest(B,(state(A))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(population,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(population,_))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),const(E,stateid(texas)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(texas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(texas))),))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),const(E,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,largest)).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),const(E,stateid(texas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D))))).
_parse([query], answer(,A)).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),state(C),loc(C,D),capital(D))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(texas))),traverse))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhode))))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhoderhodeisland)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(rhode))))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(rhode)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid("rhode island")))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhoderhodeisland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid("rhode island")))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(rhoderhodeisland)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(,A)).
_parse([query], answer(A,(population(B,A),const(B,cityid(tucson,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(tucson,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tucson))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(tucson,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(tucson,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,A),const(B,stateid(tucson))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer</s>A).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maine)))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(maine)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),loc(C))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),how))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how(B,A))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how(B,A)),).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(minneapolis))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),@)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(minneapolis))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how(B))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how(B,A))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(minnesota))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(minneapolis,_))),how(B,C))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),traverse(B,A))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))),)).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),traverse(B,A))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),river(B))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),traverse(B,C))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),traverse(B))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),traverse)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),river(B),traverse(B,C))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),river(B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B)))).
_parse([query], answer(A,(major(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))),river(B),traverse(B))).
_parse([query], answer(A,(river(A),traverse(A,B),river(B),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(colorado)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(colorado))))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B))))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,count)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(largest)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(largest)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(largest)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(largest)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(largest))))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa))))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(largest)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(largest)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid()))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(largest)))))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,smallest(B,(state(A),A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,A))).
_parse([query], answer(A,smallest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(@,A)))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(@)))).
_parse([query], answer(A,largest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B),state(C),loc))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),capital(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),capital(E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(F,E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),capital(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),capital(F)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(G,F)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),capital(E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),capital(G)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G),loc(H,G)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),capital(F)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G),loc(G,H),capital(H)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),capital(G)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G),loc(G,H),capital(H)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,countryid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C),loc(C,D),const(D,countryid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),@)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C),loc(C,D),const(D,countryid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),traverse))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,countryid(usa)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),traverse(C,B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,(size(B,A),highest(B)))).
_parse([query], answer(A,(population(B,A),highest(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),traverse(C,D)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),traverse))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C),loc(C,D),const(D,countryid(usa)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),capital(C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(usa))),traverse(C,D)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),highest(C,D),const(D,stateid(usa))),traverse(D,E)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(iowa,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,count(B,(state(B),A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how))how).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(iowa,_)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how)),).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(iowa))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(iowa))),how)),).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how(C)))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(iowa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,A))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,A))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),how(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(count(B,A)))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(georgia))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(georgia)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(georgia)))))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),highest(C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B,C),loc(C))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(what)))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(what)))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what,_))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(what)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))),)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))),loc))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(what))),))).
_parse([query], answer(A,(size(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(what))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(what))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(what)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))),loc)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what,_))))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))),loc)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what)),loc))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what))),loc(B))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(what)),loc(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(what)),loc)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(most))),)).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A)))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(most))),)).
_parse([query], answer(A,(river(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(most))))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(@)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(most)),))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(river(A),traverse(B)))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(most))),traverse)).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,(river(A),next_to(A,B),const(C)))).
_parse([query], answer(AB)).
_parse([query], answer</s>A).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid("most most"))))).
_parse([query], river(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(D)))).
_parse([query], answer(A,(river(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid("most most"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(ohio))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(ohio)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(ohio))),)).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(ohio))),)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(ohio))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(ohio))))).
_parse([query], answer(A,(capital(A),loc(B,A),const(B,stateid(ohio))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(ohio,_))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,cityid(ohio))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B)))).
_parse([query], answer</s>A).
_parse([query], answer(AB)).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,cityid(ohio))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,(river(A),traverse(A,B),const(B,stateid(cities)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest)).
_parse([query], answer(A,smallest)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,longest)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(longest)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run)))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(through)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(run))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),const(C,stateid(through))))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),river(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),capital(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),largest))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),river(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),capital(D)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C,B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C,B)),A))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(usa)))how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(usa,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C,B)),A)).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how)),).
_parse([query], answer(A,count(B,(state(B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,A))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,cityid(usa,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(C,B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C,B)))).
_parse([query], answer(A,(count(B,A)))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C,B)),A)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C)))).
_parse([query], answer(A,count(B,(river(B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(usa))),how(C,D)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(area)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(area)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C),loc(C,D),const(D,stateid(area)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(area)))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),capital(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),capital(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C),loc(C,D),const(D,stateid(area))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),highest(C)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(wyoming)))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming,_)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wyoming))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming))),))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B))))).
_parse([query], answer(A,(place(A),loc(A,B),const(B,stateid(wyoming))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(wyoming)))))).
_parse([query], answer(A,highest(A,(place(A),loc(B,A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming,_)))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming))),loc))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,place(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(B,(place(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),how))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,cityid(texas,_)))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,cityid(texas)))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),how)).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas))),how))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),how))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas))),how))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),how))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,cityid(texas,_)))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,cityid(texas)))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(city(B),loc(B,C),const(C,cityid))))).
_parse([query], answer(A,count(B,(size(C))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alabama))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alabama)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alabama)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama)))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alabama)))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,stateid(alabama))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(alabama))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alabama))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,stateid(alabama))))).
_parse([query], answer(A)).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(major(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C,stateid(alabama))))).
_parse([query], answer(A,(city(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(alabama)),loc))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C)))).
_parse([query], answer(@)).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),city(C),loc(C)))).
_parse([query], answer</s>A).
_parse([query], answer(AB)).
_parse([query], city(A)).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B))))).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),traverse(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B),loc(A,B))))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B),state(B),traverse(A,B))))).
_parse([query], answer(A,largest(B,(state(A),traverse(A,B),state(B))))).
_parse([query], answer(A,highest(B,(state(A),traverse(A,B),state(B))))).
_parse([query], answer(A,smallest(B,(state(B),loc(A,B),state(B))))).
_parse([query], answer(A,highest)).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(major(A),traverse(A)))).
_parse([query], answer(@)).
_parse([query], river(A)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(populous)))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(populous)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("populous state"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B,A)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most)),))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(@,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),river(C)))).
_parse([query], answer(A,(river(A),traverse(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(river(A),traverse(A,B),const(C)))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer</s>A).
_parse([query], river(A)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid("most most"))))).
_parse([query], which(A)).
_parse([query], next_to(A)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mount))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mckinley"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mount"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mount))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mckinley"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mount"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mckinley")))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in")))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mount")))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"""))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mount))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mckinley"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount mount"))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("mount in"""))))).
_parse([query], answer(A,(area(B)))).
_parse([query], answer(A,largest)).
_parse([query], answer(A,(size(B)))).
_parse([query], answer(AB)).
_parse([query], answer</s>A).
_parse([query], answerA).
_parse([query], answer(@)).
_parse([query], answer?A).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))),)).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(river(A),loc(B,A)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C)))).
_parse([query], answer(A,highest(A))).
_parse([query], answer(A,(river(A),traverse(@,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,largest(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid("most most"))))).
_parse([query], answer</s>A).
_parse([query], river(A)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid("most most"))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(mississippi))))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(major(A),loc(A,B)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(major(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(major(A),city(A),loc(A,B)))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C)))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),state(C),loc(C,D)))).
_parse([query], answer(A,(major(A),loc(A,B),state(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),state(C),loc(C)))).
_parse([query], answer(@)).
_parse([query], answer(AB)).
_parse([query], answer</s>A).
_parse([query], river(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,place(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,place(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas))),))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,highest(A,place(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas))),loc))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))),)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(illinois))),)).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(illinois))))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),next_to(A)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], state(A)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)),A))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)),@))).
_parse([query], answer(A,count(B,(state(B),A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)),A)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(tennessee)))how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,cityid(tennessee,_)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how)),).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)),@)).
_parse([query], answer(A,count(B,(state(B),traverse(B,C),const(C,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(tennessee)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(tennessee))),how))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,A))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)))).
_parse([query], answer(A,count(B,(state(B),next_to(B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(tennessee)))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C)))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,cityid(tennessee,_)))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C))))).
_parse([query], answer(A,count(B,(state(B),next_to(C,B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,D)))).
_parse([query], answer(A,count(B,A))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)),A)).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),how(C,B)),@)).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(state(B),traverse(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(tennessee))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(tennessee))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C,D))))).
_parse([query], answer(A,count(B,(state(B),next_to(B,C),state(C),next_to(C))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),how))).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))))).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(rhode,_)))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhoderhodeisland))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(rhode))),@)).
_parse([query], answer(A,count(B,(population(C,B),const(C,cityid(rhode,_)))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(rhode,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(boulder))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(boulder))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(boulder))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(boulder))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(boulder,_))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(boulder))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(boulder,_))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))),@)).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))),loc)).
_parse([query], answer(ofA)).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(boulder)),loc))).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A),const(B,cityid(boulder,_))),loc(B))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),traverse(A,B),const(B,stateid(texas))))).
_parse([query], answer(A)).
_parse([query], answer(@)).
_parse([query], answer</s>A).
_parse([query], are(A)).
_parse([query], cities(A)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(most)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),loc(B,A)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),largest(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(B,A),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(D,C),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D),traverse(E,D)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,state(A))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(D,E),state(E)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),traverse(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),loc(C,B),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(river(A),next_to(A,B),const(B,stateid(michigan))))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(river(A),traverse(A)))).
_parse([query], answer(A,(river(A),next_to(A)))).
_parse([query], answer</s>A).
_parse([query], next_to(A)).
_parse([query], states(A)).
_parse([query], state(A)).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(arkansas))),))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,B,(state(B),loc(B,C),const(C,stateid(arkansas)))))).
_parse([query], answer(A,largest(B,(state(B),loc(B,C),const(C,stateid(arkansas))))))).
_parse([query], answer(A,smallest(B,(state(B),loc(B,C),const(C,stateid(arkansas))))))).
_parse([query], answer(A,highest(B,(state(B),loc(B,C),const(C,stateid(arkansas))))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte)))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte))),@))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(platte))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(platte))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(platte))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte))),A))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(platte))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(platte))))).
_parse([query], answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(platte))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte))),@))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platte))),A))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),state(C))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(platteplatteplatte)))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(population))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid("has population"))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),const(E,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C),state(D)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid("has population"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york")))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(yorknewyork))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid("new york"))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(size(B,A),capital(B)))).
_parse([query], answer(ofA)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest)))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest)))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))),)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest)),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))),)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest)),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(B,A)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest)),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B),const(C,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),const(D,stateid(fewest))))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(C,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))),traverse(B,C))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))),traverse)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(fewest))),traverse(B))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))),traverse(C,D))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest)),traverse(C,D)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(river(A),traverse(B,A),river(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))),traverse)).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))),traverse(C))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D),state(D)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest)),traverse(C)))).
_parse([query], answer(A,(river(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(fewest))),river(C))).
_parse([query], answer</s>A).
_parse([query], river(A)).
_parse([query], rivers(A)).
_parse([query], traverse(A)).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A)).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(major(A),loc(B,A)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(city(A),loc(A,B),highest(B,C)))).
_parse([query], answer(A,(major(A),loc(A,B),highest(B,C),const(C,stateid(texas)),loc))).
_parse([query], answer(ofA)).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(longest)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(longest)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(longest)))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(longest))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),const(E,stateid(longest))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most,_))))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,most(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most)))))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B)))).
_parse([query], answer(A,(state(A),traverse(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most,_))),)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most,_))),)).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),traverse(B,C),const(C,stateid(most))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),traverse(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(most,_)),traverse))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(texas))),A))).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),@))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))),@))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),population))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),loc))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),)).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))),)).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),population)).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),highest(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas))),A)).
_parse([query], answer(A,(population(B,A),loc(B,C),const(C,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),loc)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),loc)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))),population)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(population(B,A),highest(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,(population(B,A),loc(B,C)))).
_parse([query], answer(A,(population(B,A),city(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),highest(B,C)))).
_parse([query], answer(A,(population(B,A),city(B),loc(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas)),loc))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B,A)))).
_parse([query], answer(A,(capital(A,@)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(population(B,A),const(B,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid("new mexico"))))).
_parse([query], answer(ofA)).
_parse([query], answerA).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))),B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))),B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))))))).
_parse([query], answer(A,(population(B,A),highest(B,C)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))),)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))),)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),loc(B,C)))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),highest(C,D)))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),highest(C,D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))),B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))),B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(D,C)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),highest(C,D)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,E)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E),highest(E,F))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))),B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))),B)))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(usa))))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(the))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,E)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E),highest(E,F))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E),highest(E,F))))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E),highest(E,F))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,D),highest(D,(place(D),loc(D,E),highest(E,F))))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),how))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),how)).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),how)).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),how)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(mississippi))),how)),).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),@)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,count(B,(population(C,B))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(mississippi,_))),how(B))).
_parse([query], answer(A,count(B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(@),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(@),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(@),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(A),loc(B,A))))).
_parse([query], answer(A,highest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(place(@),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(mississippi)))))).
_parse([query], answer(A,highest(A,B))).
_parse([query], answer(A,smallest)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(salt))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(salt))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(lake)))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(salt)))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(lake)))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(lake)))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(salt))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(salt))))).
_parse([query], answer(A,(state(A)))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(lake))))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),const(C,stateid(salt))))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A)).
_parse([query], answer(A,(capital(A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(state(A),loc(A,B),state(B),loc(B,C),capital(C)))).
_parse([query], answer(@)).
_parse([query], answerA).
_parse([query], answer</s>A).
_parse([query], answer(AB)).
_parse([query], state(A)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban))))).
_parse([query], answer(A,smallest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,smallest(B,A))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,smallest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),const(C,B)))).
_parse([query], answer(A,largest(B,(state(A),loc(A,B))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,stateid(urban))))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C))),).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(D,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(B,C)))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(C,B),const(C,cityid(urban,_))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(montana))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(montana))))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,place(montana))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(montana))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,place(montana))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C)))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(montana))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(montana))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,place(C))))).
_parse([query], answer(A,count(B,(place(B),loc(B,C),highest(C,place(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,place(montana))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(montana))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,place(montana))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C)))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,place(montana))))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,place(montana))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),highest(D,stateid(montana))))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C)))))).
_parse([query], answer(A,(population(B,A),highest(B,C),highest(C,(place(C),loc(C)))))).
_parse([query], answer(A,(size(B,A),highest(B,C),highest(C,(place(C),loc(C,D),loc(D)))))).
_parse([query], answer(A,smallest)).
_parse([query], answer(A,largest)).
_parse([query], answer(A,highest(B,(state(B),traverse(B,C),state(C),loc(D,C))))).
_parse([query], answer(A,longest)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(texas))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(texas))))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(vermont))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(vermont)))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(vermont)))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont)))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(vermont)))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(vermont))))).
_parse([query], answer(A,(major(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(city(A),city(A),loc(A,B),const(B,stateid(vermont))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(vermont))))).
_parse([query], answer(A)).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,(city(A),loc(A)))).
_parse([query], answer(A,(river(A),loc(A)))).
_parse([query], answer(A,(major(A),city(A),loc(A)))).
_parse([query], answer(A,(city(A),city(A),loc(A)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B)))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(vermont,_))))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),const(C,stateid(vermont)),loc))).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),highest(C)))).
_parse([query], answer(@)).
_parse([query], answer(A,(major(A),loc(A,B),city(B),loc(B,C),city(C),loc(C)))).
_parse([query], answer</s>A).
_parse([query], answer(AB)).
_parse([query], city(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(the)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(B)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,(capital(A),loc(A,B),highest(B)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(major(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoochee))),)).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoocheechattahoocheechattahoochee))))).
_parse([query], answer(A,(river(A),loc(A,B),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(loc(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(area(B,A),const(B,stateid(chattahoochee))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoochee,_))))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(loc(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(river(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(chattahoocheechattahoocheechattahoochee))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(utah))),)).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_))))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(utah,_)))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,cityid(utah,_))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(population(B,A),loc))).
_parse([query], answer(A,(population(B,A),loc(B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),const(B,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),const(C,stateid(utah))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(A,C),const(C,stateid(utah))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@)),).
_parse([query], answer(A,count(B,(major(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(B)))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how)),).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@)),).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),@))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa)))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),A)),).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),city(B))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),how))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),A))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),B)),).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(major(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),B))).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D),const(D,stateid(usa))),count))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),state(C),loc(C,D))))).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C,D))))).
_parse([query], answer(A,count(B,(state(B),city(B),loc(B,C),const(C,stateid(usa))),how)),A).
_parse([query], answer(A,count(B,(state(B),loc(B,C),(C),loc(C))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),@)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),@))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),traverse(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(arizona))),)).
_parse([query], answer(A,(river(A),traverse(A,B),const(B,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(arizona))))).
_parse([query], answer(A,(state(A),traverse(B,A)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),traverse(B,A))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),next_to(B,A))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),@)).
_parse([query], answer(A)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),traverse(B,C))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C)))).
_parse([query], answer(A,(river(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C)))).
_parse([query], answer(A,(river(A),next_to(A,B)))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),traverse(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),traverse)).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),next_to(B))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(arizona))),next_to)).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),state(C),traverse(C,D)))).
_parse([query], answer(A,(state(A),traverse(A,B),state(B),traverse(B,C),const(C,stateid(arizona)),traverse))).
_parse([query], answer</s>A).
_parse([query], states(A)).
_parse([query], next_to(A)).
_parse([query], state(A)).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(city(A),loc(A,B),const(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B,stateid(arkansas)))))).
_parse([query], answer(A,highest(A,(place(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),highest(B))))).
_parse([query], answer(A,highest(A,(city(A),loc(A))))).
_parse([query], answer(A,highest(A,place(A),loc(A)))).
_parse([query], answer(A,highest(A,(river(A),loc(A))))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),loc(B))))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,highest(A,(place(A),loc(A,B),capital(B),loc(B))))).
_parse([query], answer(A,highest(A,place(A)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(populous))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid())))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid("most state"))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B)))).
_parse([query], answer(A,(state(A),loc(A,B)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(state(A),traverse(A,B)))).
_parse([query], answer(A,(state(A),traverse(A)))).
_parse([query], answer(A,(state(A),loc(@,B)))).
_parse([query], answer(populationA)).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(B,A),state(B),loc(B)))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),loc(B,A),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),traverse(A,B),const(B,stateid(mississippi))))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(B,A)))).
_parse([query], answer(A,state(A,B),state(B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B)))).
_parse([query], answer(A,(state(A),next_to(@,A)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most))))).
_parse([query], answer(A,state(A,B),state(B),next_to(C,B))).
_parse([query], answer(A,smallest(B,(state(A))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B),state(C),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(A,B)))).
_parse([query], answer(A,(state(A),next_to(A,B)))).
_parse([query], answer(A,state(A,B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B),state(C)))).
_parse([query], answer(A,state(A,B),state(B),next_to(B,C))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most)))))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C)))).
_parse([query], answer(A,state(A,B),state(B),next_to(B))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(C,D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B),state(C),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(B,C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(most))))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),state(D)))).
_parse([query], answer(A,(state(A),next_to(B)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C,B),state(C),next_to(C,D)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(C,D)))).
_parse([query], answer(A,state(A,B),state(B),next_to(C))).
_parse([query], answer(AB)).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(C)))).
_parse([query], answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E)))).
_parse([query], answer(A,(state(A),next_to(B,A),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid("population density"))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid("population density"))))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density)))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density)))))).
_parse([query], answer(A,(capital(A,@)))).
_parse([query], answer(A,highest(B,(place(A),loc(A,B))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid("population density"))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid("population density"))))).
_parse([query], answer(A,highest(B,(place(A))))).
_parse([query], answer(A,(capital(A),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,B)))).
_parse([query], answer(A,(capital(A),loc(@,B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),capital(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid(density))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid(density))))).
_parse([query], answer(A,highest(B))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(A,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),capital(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(B,C),const(C,stateid("population density"))))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),const(C,stateid("population density"))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(area(B,A),capital(B),loc(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),loc(C)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B),loc(C,B),capital(C),loc(D)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wisconsin)))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(wisconsin)))))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))),)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))),)).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(capital(A),loc(B,A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B)))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C)))).
_parse([query], answer(A,(state(A),loc(A)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C)))).
_parse([query], answer(A,(area(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(A,(state(A),loc(A,B),const(B,stateid(wisconsin))))).
_parse([query], answer(AB)).
_parse([query], answer(A,(area(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(wisconsin))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@))).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))),@))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))),@))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),)).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(texas)))))).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))),)).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))),@)).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))),)).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(texas,_))),)).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,(size(B,A),const(B,cityid(texas,_))))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(size(B,A),const(B,stateid(texas))),@)).
_parse([query], answer(A,(population(B,A),(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(len(B,A)))).
_parse([query], answer(A,count(B,(river(B),loc(B,C),const(C,cityid(texas)))))).
_parse([query], answer(A,(size(B,A),(B)))).
_parse([query], answer(A,(population(B,A),const(B,cityid(texas,_))),@)).
_parse([query], answer(A,count(B,(river(B),loc(B,C))))).
_parse([query], answer(A,count(B,(river(B),loc(B))))).
_parse([query], answer(A,count(B))).
_parse([query], answer(AB)).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),state(B)))).
_parse([query], answer(A,(area(B,A)))).
_parse([query], answer(A,(capital(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa)))))).
_parse([query], answer(A,(area(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B)))).
_parse([query], answer(A,(size(B,A)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B)))).
_parse([query], answer(A,(population(B,A),state(B),loc(B,C),const(C,stateid(usa))))).
_parse([query], answer(A,(state(A),loc(B,A)))).
_parse([query], answer(A,(state(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(B,C),state(C)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(C,D),state(D)))).
_parse([query], answer(A,(population(B,A),capital(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(population(B,A),state(B),loc(C,B),state(C),loc(C,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),capital(B)))).
_parse([query], answer(A,(capital(A),loc(B,A),capital(B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(C,B)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(D,C)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(E,D)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(F,E)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(G,F)))).
_parse([query], answer(A,(capital(A),loc(A,B),state(B),loc(B,C),state(C),loc(C,D),state(D),loc(D,E),state(E),loc(E,F),state(F),loc(F,G),state(G),loc(H,G)))).
